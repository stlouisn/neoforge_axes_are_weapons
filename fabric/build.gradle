plugins {
  id "com.gradleup.shadow"
}

architectury {
  platformSetupLoomIde()
  fabric()
}

base {
  archivesName = "${project.archives_base_name}-${project.minecraft_version}-fabric"
}

configurations {

  common {
    canBeResolved = true
    canBeConsumed = false
  }

  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentFabric.extendsFrom common

  shadowBundle {
    canBeResolved = true
    canBeConsumed = false
  }

}

repositories {

  // Cloth Config API, Mod Menu
  maven { url = "https://maven.terraformersmc.com/" }

}

dependencies {

  modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

  modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

  common(project(path: ':common', configuration: 'namedElements')) { transitive false }
  shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

  loom {
    mixin {
      defaultRefmapName.set("${project.archives_base_name}.fabric.refmap.json")
    }
  }

  // Cloth Config API
  modApi "me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}"

  // Mod Menu
  modApi("com.terraformersmc:modmenu:${rootProject.modmenu_version}") { exclude(module: "fabric-api") }

}

shadowJar {
  configurations = [project.configurations.shadowBundle]
  archiveClassifier = 'dev-shadow'
}

remapJar {
  input.set shadowJar.archiveFile
  destinationDirectory = file("$rootDir/files")
}